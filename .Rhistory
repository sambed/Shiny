g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.2, 1.2, step = 0.02))
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
dim(ozone)
dim(mtcars)
dim(mtcars)[1]
ss<-sample(1:3,replace=T)
ss
ss
ss<-sample(1:3,replace=T)
ss
install.packages('AppliedPredictiveModeling','caret')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages('caret')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training); dim(testing)
set.seed(125)
modFit <- train(Case ~ .,method="rpart",data=training)
print(modFit$finalModel)
?rpart
install.packages('rpart')
install.packages('rpart')
install.packages("rpart")
library(rpart)
modFit <- train(Case ~ .,method="rpart",data=training)
print(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
modFit <- train(Case ~ .,method="rpart",data=training)
print(modFit$finalModel)
install.packages('e1071')
library(e1071)
modFit <- train(Case ~ .,method="rpart",data=training)
print(modFit$finalModel)
predict(modFit,newdata=testing)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
Plot(fit$finalModel)
print(fit$finalModel)
head(training)
predData <- training[c'(TotalIntench2'),'FiberWidthCh1','PerimStatusCh1',]
predData <- training[c'(TotalIntench2','FiberWidthCh1','PerimStatusCh1'),]
predData <- training[c(TotalIntench2','FiberWidthCh1','PerimStatusCh1'),]
predData <- training[c('TotalIntench2','FiberWidthCh1','PerimStatusCh1'),]
head(predData)
predData <- training[,c('TotalIntench2','FiberWidthCh1','PerimStatusCh1')]
predData <- training[1:3,]
head(predData)
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
dim9training
names(training)
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
predData <- training[1:3,]
dim(predData)
names(predData)
dim(predData)
predData[1,c(103,50,85)]
fit
x = data.frame(TotalIntench2 = c(23000,50000,57000), FiberWidthCh1 = c(10,10,8),  PerimStatusCh1=c(2,100,100) )
x
x[1:2,]
x = data.frame(TotalIntench2 = c(,50000,57000), FiberWidthCh1 = c(10,10,8),  PerimStatusCh1=c(2,100,100) )
x = data.frame(TotalIntench2 = c('',50000,57000), FiberWidthCh1 = c(10,10,8),  PerimStatusCh1=c(2,100,100) )
x
x = data.frame(TotalIntench2 = c(23000,50000,57000,''), FiberWidthCh1 = c(10,10,8,1),  PerimStatusCh1=c(2,'','',2), VarIntenCh4 = c('',100,100,100) )
x
x = data.frame(TotalIntench2 = c(23000,50000,57000,''), FiberWidthCh1 = c(10,10,8,8),  PerimStatusCh1=c(2,'','',2), VarIntenCh4 = c('',100,100,100) )
x
predict(fit,x)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
predData[1,c(103,50,85)]=c(23000,10,2)
predict(fit,predData)
predData[2,c(103,50,85)]=c(50000,10,100)
predict(fit,predData)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
which(colnames(training)=="VarIntenCh4")
predData[4,c(50,112,85)]=c(8,100,2)
predict(fit,preData)
predict(fit,predData)
predict(fit,predData[4,c(50,112,85)]=c(8,100,2))
head(preData)
head(predData)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages(pgm)
install.packages('pgm')
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
head(olive,10)
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
summary(olive$Area)
?createDataPartition
inTrain <- createDataPartition(y=olive$Area,
p=0.7, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
dim(training); dim(testing)
modFit <- train(Case ~ .,method="rpart",data=training)
modFit <- train(Case ~ .,method="rpart",data=training)
source('~/.active-rstudio-document')
?train
modFit <- train(olive ~ .,method="rf",data=training)
inTrain <- createDataPartition(y=olive$Area,
p=0.7, list=TRUE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
dim(training); dim(testing)
inTrain <- createDataPartition(y=olive$Area,
p=0.7, list=True)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
dim(training); dim(testing)
inTrain <- createDataPartition(y=olive$Area,
p=0.7, list=TRUE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
dim(training); dim(testing)
modFit <- train(olive ~ .,method="rf",data=training,prox= T)
fit <- train(Area~.,data=olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
fit <- train(Area~.,data=olive,method="rpart")
pred <- predict(fit,newdata)
pred
fit$finalModel
newdata = as.data.frame(t(colMeans(olive)))
fit <- train(Area~.,data=olive,method="rf")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
dim(SAheart)
dim(SAheart)[1]
sample(1;2)
sample(1:2)
sample(1:2)
sample(1:10)
sample(1:10)
sample(1:10)
sample(1:10,size= .5)
set.seed(1234)
fit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
head(vowel)
vowel.train
head(vowel.train)
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
set.seed(1234)
fit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(fit,trainSA))
missClass(testSA$chd,predict(fit,testSA))
owel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
imps
?poisson
ppois(55,3)
ppois(55,57)
ppois(55,57)-1
1-ppois(55,57)
ppois(55,57)*2
lungcancer=read.csv(file="C:/Users/Sapana/Desktop/STA666_Exam2_Take-home_problem1_data.csv", head=TRUE, sep=",")
head
head(lungcancer,3)
Age=lungcancer$Age
Sex=lungcancer$Sex
Survived=lungcancer$Status
glm_age=glm(Survived~Age,family=binomial(logit),data=lungcancer)
summary(glm_age)
vcov(glm_age)
solve(vcov(glm_age))
x <- seq(-3,3,0.01)
y1 <- dnorm(x,0,1)
y2 <- 0.5*dnorm(x,0,1)
plot(x,y1,type="l",bty="L",xlab="X",ylab="dnorm(X)")
points(x,y2,type="l",col="red")
polygon(c(x,rev(x)),c(y2,rev(y1)),col="skyblue")
updateR()
# installing/loading the latest installr package:
install.packages("installr"); library(installr) #load / install+load installr
updateR() # updating R.
require(rcharts)
install.packages('rcharts')
install.packages('devtools')
library(devtools)
find_rtools()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myplot
myplot
myPlot
myPlot(cars)
library(manipulate)
myPlot(cars)
find_rtools()
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(cars), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
find_devtools()
find_rtools()
library(rtools)
myPlot(10)
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(10), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(10), s = slider(0, 2, step = 0.1))
manipulate(myPlot(cars), s = slider(0, 2, step = 0.1))
require(rcharts)
library(rcharts)
library(rCharts)
install.packages('rCharts')
updateR()
library(installr)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
?dtable
?dTable
library(dplyr)
library(readr)
library(ggmap)
data_dir <- "../input"
train <- read_csv(file.path(data_dir, "train.csv"))
mapdata <- readRDS(file.path(data_dir, "mapdata_copyright_openstreetmap_contributors.rds"))
train$Date <- as.Date(train$Date)
# Which date has the most measurements?
counts_by_date <- train %>% group_by(Date) %>% summarise(NumMeasurements = n()) %>% arrange(desc(NumMeasurements)) %>% head
counts_by_date
date_to_show <- counts_by_date$Date[1]
single_date_grouped_by_location <- train %>%
filter(Date == "2007-08-01") %>%
group_by(Longitude, Latitude) %>%
summarize(NumMosquitos = sum(NumMosquitos))
qplot(single_date_grouped_by_location$NumMosquitos) +
scale_x_log10() +
xlab("Number of Mosquitos") +
ylab("Number of test sites w/ this many mosquitos") +
ggtitle("Distribution of Mosquito Counts (Log Scale")
ggmap(mapdata) +
geom_point(aes(x=Longitude, y=Latitude, color=NumMosquitos), size=3, data=single_date_grouped_by_location) +
scale_color_continuous(trans="log") +
ggtitle(sprintf("Spatial Arrangement of Mosquito Counts on %s", date_to_show))
library(dplyr)
library(readr)
library(ggmap)
library(ggplot)
data_dir <- "../input"
train <- read_csv(file.path(data_dir, "train.csv"))
mapdata <- readRDS(file.path(data_dir, "mapdata_copyright_openstreetmap_contributors.rds"))
train$Date <- as.Date(train$Date)
# Which date has the most measurements?
counts_by_date <- train %>% group_by(Date) %>% summarise(NumMeasurements = n()) %>% arrange(desc(NumMeasurements)) %>% head
counts_by_date
date_to_show <- counts_by_date$Date[1]
single_date_grouped_by_location <- train %>%
filter(Date == "2007-08-01") %>%
group_by(Longitude, Latitude) %>%
summarize(NumMosquitos = sum(NumMosquitos))
qplot(single_date_grouped_by_location$NumMosquitos) +
scale_x_log10() +
xlab("Number of Mosquitos") +
ylab("Number of test sites w/ this many mosquitos") +
ggtitle("Distribution of Mosquito Counts (Log Scale")
ggmap(mapdata) +
geom_point(aes(x=Longitude, y=Latitude, color=NumMosquitos), size=3, data=single_date_grouped_by_location) +
scale_color_continuous(trans="log") +
ggtitle(sprintf("Spatial Arrangement of Mosquito Counts on %s", date_to_show))
library(dplyr)
library(readr)
library(ggmap)
install.packages('ggplot');library(ggplot)
data_dir <- "../input"
train <- read_csv(file.path(data_dir, "train.csv"))
mapdata <- readRDS(file.path(data_dir, "mapdata_copyright_openstreetmap_contributors.rds"))
train$Date <- as.Date(train$Date)
# Which date has the most measurements?
counts_by_date <- train %>% group_by(Date) %>% summarise(NumMeasurements = n()) %>% arrange(desc(NumMeasurements)) %>% head
counts_by_date
date_to_show <- counts_by_date$Date[1]
single_date_grouped_by_location <- train %>%
filter(Date == "2007-08-01") %>%
group_by(Longitude, Latitude) %>%
summarize(NumMosquitos = sum(NumMosquitos))
qplot(single_date_grouped_by_location$NumMosquitos) +
scale_x_log10() +
xlab("Number of Mosquitos") +
ylab("Number of test sites w/ this many mosquitos") +
ggtitle("Distribution of Mosquito Counts (Log Scale")
ggmap(mapdata) +
geom_point(aes(x=Longitude, y=Latitude, color=NumMosquitos), size=3, data=single_date_grouped_by_location) +
scale_color_continuous(trans="log") +
ggtitle(sprintf("Spatial Arrangement of Mosquito Counts on %s", date_to_show))
rmd_file <- commandArgs(TRUE)[1]
working_dir <- "../working" # rmarkdown starts in same directory as source file
library(rmarkdown)
library(knitr)
opts_knit[['set']](root.dir = working_dir)
render(rmd_file, output_file = 'output.html', output_dir = working_dir, intermediates_dir = working_dir)
library(shiny)
shiny::runApp('C:/Users/Sapana/Downloads/Edx/Shiny')
setwd("C:/Users/Sapana/Downloads/Edx/Shiny")
shiny::runApp()
shiny::runApp()
li = 89
plot(cars$speed,cars$dist,xlab="Speed",ylab='Distance')
lines(input$li,input$li,col='red')
text(50,150,paste('Value from slider',li))
li = 89
plot(cars$speed,cars$dist,xlab="Speed",ylab='Distance')
lines(li,li,col='red')
text(50,150,paste('Value from slider',li))
li = 89
plot(cars$speed,cars$dist,xlab="Speed",ylab='Distance')
lines(c(li,li),c(0,200),col='red')
text(50,150,paste('Value from slider',li))
lines(c(34,34),c(0,200),col='red')
x <- c(1:5); y <- x # create some data
par(pch=22, col="red") # plotting symbol and color
par(mfrow=c(2,4)) # all plots on one page
opts = c("p","l","o","b","c","s","S","h")
for(i in 1:length(opts)){
heading = paste("type=",opts[i])
plot(x, y, type="n", main=heading)
lines(x, y, type=opts[i])
}
x <- c(1:5); y <- x # create some data
par(pch=22, col="blue") # plotting symbol and color
par(mfrow=c(2,4)) # all plots on one page
opts = c("p","l","o","b","c","s","S","h")
for(i in 1:length(opts){
heading = paste("type=",opts[i])
plot(x, y, main=heading)
lines(x, y, type=opts[i])
}
title(main="My Title", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
title(main="My Title", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
attach(mtcars)
plot(wt, mpg, main="Milage vs. Car Weight",
xlab="Weight", ylab="Mileage", pch=18, col="blue")
text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(cars$speed,cars$dist,xlab="Speed",ylab='Distance')
text(50,150,paste('Value from slider','li'asdf))
text(50,150,paste('Value from slider','liasdf))
)
)
text(50,150,paste('Value from slider','asdf'))
plot(rnorm(0,1),rnorm(0,1))
plot(rnorm(0,1),rnorm(0,1),xlim = c(-5,5))
plot(rnorm(0,1),rnorm(0,1),xlim = c(-5,5),yylim = c(0,1))
plot(rnorm(0,1),rnorm(0,1),xlim = c(-5,5),ylim = c(0,1))
text(50,150,paste('Value from slider','asdf'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(cars$speed,cars$dist,xlab="Speed",ylab='Distance')
abline(40,40)
plot(cars$speed~cars$dist,xlab="Speed",ylab='Distance')
abline(40,40)
text(87,150,paste('Value from slider',99999))
text(40,150,paste('Value from slider',99999))
text(40,40,paste('Value from slider',99999))
text(40,40,'sdfsdfsdf')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?runApp
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(display.mode = 'showcase' )
?reactive
shiny::runApp()
?isolate
shiny::runApp()
shiny::runApp()
?fluidPage
shiny::runApp()
shiny::runApp()
.libPaths()
library(devtools)
install_github('slidify',ramathv)
install_github('slidify','ramathv')
install_github('slidifyLibraries','ramnathv')
library(slidfify)
library(slidifify)
library(slidify)
runExample("01_hello")
runExample("02_text")
shiny::runApp()
shiny::runApp()
runExample("02_text")
shiny::runApp()
runExample("04_mpg")
runExample("04_mpg")
runExample("05_sliders")
shiny::runApp()
runExample("06_tabsets"
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
runExample("06_tabsets")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
